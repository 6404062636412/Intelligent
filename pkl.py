import streamlit as st
import pickle
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Load Model 1 (Machine Learning - Numeric Data)
with open("finalized_model.pkl", "rb") as file:
    model1 = pickle.load(file)

# Load Model 2 (Neural Network - Text Data)
model2 = tf.keras.models.load_model("Disaster_modelv2.h5")

# Load Tokenizer for Model 2
with open("tokenizer.pkl", "rb") as file:
    tokenizer2 = pickle.load(file)

# Sidebar for Navigation
st.sidebar.title("üîç Navigation")
page = st.sidebar.radio("üìå Select Page", 
                        ["üè† Home",
                         "üìñ ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning ‡πÅ‡∏•‡∏∞ Neural Network", 
                         "üìä Model 1 (Numeric Prediction)", 
                         "üìù Model 2 (Text Prediction)", 
                         "üìñ About Model 1", 
                         "üìñ About Model 2"])

# Home Page
if page == "üè† Home":
    st.markdown("<h1 style='text-align: center; color: #FF5733;'>Welcome to ML & NN Prediction App</h1>", unsafe_allow_html=True)
    st.markdown("### ü§ñ This app provides two types of predictions:")
    st.write("- **üìä Model 1:** Predict using a machine learning model based on numerical input.")
    st.write("- **üìù Model 2:** Predict using a neural network model based on text input.")
    st.markdown("<h3 style='text-align: center;'>Use the sidebar to navigate.</h3>", unsafe_allow_html=True)

# Development Process
elif page == "üìñ ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning ‡πÅ‡∏•‡∏∞ Neural Network":
    st.title("‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning ‡πÅ‡∏•‡∏∞ Neural Network")
    st.write("""
    ## 1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Preparation)
    - 1.1 ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (Numerical Data) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Machine Learning
        - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ (Missing Values) ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        - ‡∏ó‡∏≥ Normalization ‡∏´‡∏£‡∏∑‡∏≠ Standardization ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á ‡πÜ
        - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (Feature Selection) ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏à‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà (Feature Engineering)
    
    - 1.2 ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (Text Data) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Neural Network
        - ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ú‡πà‡∏≤‡∏ô Tokenization
        - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Padding ‡∏´‡∏£‡∏∑‡∏≠ Truncating
        - ‡πÉ‡∏ä‡πâ Word Embedding ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå
    
    ## 2. ‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    - **Model 1:** ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Machine Learning
        - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ä‡πâ Decision Tree ‡∏´‡∏£‡∏∑‡∏≠ Random Forest
             - Decision Tree: ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡πà‡∏≤‡∏á ‡πÜ
             - Random Forest: ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡∏°‡∏≤‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î Overfitting ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥

    - **Model 2:** ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Neural Network
        - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• LSTM ‡∏´‡∏£‡∏∑‡∏≠ GRU ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Recurrent Neural Network (RNN)
             - LSTM (Long Short-Term Memory): ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏î‡∏à‡∏≥‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
             - GRU (Gated Recurrent Unit): ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ LSTM ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏≤‡∏Å‡∏ß‡πà‡∏≤ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ù‡∏∂‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
    
    ## 3. ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•
    - **Model 1:**
      1. Feature Engineering ‡πÅ‡∏•‡∏∞ Feature Selection
      2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏° (Decision Tree / Random Forest)
      3. ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (Training) ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö Hyperparameters
      4. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏î‡πâ‡∏ß‡∏¢ Accuracy ‡πÅ‡∏•‡∏∞ Confusion Matrix
             
    - **Model 2:**
      1. Preprocessing ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Tokenization, Padding, Word Embedding)
      2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• LSTM ‡∏´‡∏£‡∏∑‡∏≠ GRU
      3. ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (Training) ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ Hyperparameters
      4. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Accuracy ‡πÅ‡∏•‡∏∞ Loss Metrics
    
    ## 4. ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (Deployment)
    - The trained models are saved as `.pkl` (for ML) and `.h5` (for NN).
    - Streamlit is used as the frontend for easy interaction.
    """)

# About Model 1 (Machine Learning)
elif page == "üìñ About Model 1":
    st.markdown("<h1 style='color: #3498db;'>About Model 1 - Machine Learning</h1>", unsafe_allow_html=True)
    st.write("""
    üß† **Model 1** is built using **traditional Machine Learning algorithms** to predict outcomes based on numerical input data. 
    This model is commonly used in fields like finance, healthcare, and business analytics.
    """)
    st.markdown("### üöÄ Features:")
    st.write("- Uses numerical data as input.")
    st.write("- Can perform **regression** or **classification** tasks.")
    st.write("- Trained using structured datasets.")

# About Model 2 (Neural Network)
elif page == "üìñ About Model 2":
    st.markdown("<h1 style='color: #9b59b6;'>About Model 2 - Neural Network for Text</h1>", unsafe_allow_html=True)
    st.write("""
    üî• **Model 2** is a deep learning model designed to analyze and classify textual data. It uses **Natural Language Processing (NLP)** 
    techniques and is trained with a Tokenizer to convert words into numerical sequences for prediction.
    """)
    st.markdown("### ‚ú® Features:")
    st.write("- Takes text as input and converts it into word embeddings.")
    st.write("- Uses **Neural Networks (LSTM, GRU, or Dense layers)** for prediction.")
    st.write("- Ideal for **sentiment analysis**, **spam detection**, and **text classification**.")

# Model 1 - Numeric Prediction
elif page == "üìä Model 1 (Numeric Prediction)":
    st.markdown("<h1 style='color: #2ecc71;'>Predict with Machine Learning Model</h1>", unsafe_allow_html=True)
    input_data = st.text_input("üî¢ Enter numerical values separated by commas (e.g., 5.1, 3.5, 1.4, 0.2):")
    
    if st.button("‚ö° Predict"):
        try:
            data = np.array(input_data.split(","), dtype=float).reshape(1, -1)
            prediction = model1.predict(data)
            st.success(f"üéØ Prediction Result: **{prediction[0]}**")
        except:
            st.error("‚ùå Invalid input. Please enter numerical values correctly.")

# Model 2 - Text Prediction
elif page == "üìù Model 2 (Text Prediction)":
    st.markdown("<h1 style='color: #e74c3c;'>Predict with Neural Network (Text)</h1>", unsafe_allow_html=True)
    input_text = st.text_area("üñäÔ∏è Enter text for prediction:")
    
    if st.button("‚ö° Predict"):
        try:
            sequences = tokenizer2.texts_to_sequences([input_text])
            padded_sequences = pad_sequences(sequences, maxlen=100)
            prediction = model2.predict(padded_sequences)
            prediction_class = (prediction[0] >= 0.5).astype(int)
            st.success(f"üéØ Prediction Result: **{prediction_class[0]}** (0 = Negative, 1 = Positive)")
        except Exception as e:
            st.error(f"‚ùå Error: {e}")
